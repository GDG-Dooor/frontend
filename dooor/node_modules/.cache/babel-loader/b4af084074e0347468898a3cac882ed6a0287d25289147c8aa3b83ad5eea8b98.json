{"ast":null,"code":"import axios from 'axios';\nconst CHAT_API_BASE_URL = 'http://43.202.174.46:5000';\nclass ChatService {\n  async sendMessage(message, userName, accessToken) {\n    try {\n      const response = await axios.get(`${CHAT_API_BASE_URL}/chat/message`, {\n        params: {\n          message,\n          userName\n        },\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      if (axios.isAxiosError(error) && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // 토큰이 만료된 경우\n        throw new Error('TOKEN_EXPIRED');\n      }\n      throw error;\n    }\n  }\n  async refreshToken(refreshToken) {\n    try {\n      const response = await axios.post(`${CHAT_API_BASE_URL}/auth/refresh`, null, {\n        headers: {\n          Authorization: `Bearer ${refreshToken}`\n        }\n      });\n      return response.data.accessToken;\n    } catch (error) {\n      throw new Error('토큰 갱신에 실패했습니다.');\n    }\n  }\n}\nexport const chatService = new ChatService();","map":{"version":3,"names":["axios","CHAT_API_BASE_URL","ChatService","sendMessage","message","userName","accessToken","response","get","params","headers","Authorization","data","error","_error$response","isAxiosError","status","Error","refreshToken","post","chatService"],"sources":["C:/Users/MINYONG/Desktop/frontend/dooor/src/services/chatService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst CHAT_API_BASE_URL = 'http://43.202.174.46:5000';\r\n\r\ninterface ChatResponse {\r\n  message: string;\r\n}\r\n\r\nclass ChatService {\r\n  async sendMessage(message: string, userName: string, accessToken: string): Promise<string> {\r\n    try {\r\n      const response = await axios.get<string>(`${CHAT_API_BASE_URL}/chat/message`, {\r\n        params: {\r\n          message,\r\n          userName\r\n        },\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response?.status === 401) {\r\n        // 토큰이 만료된 경우\r\n        throw new Error('TOKEN_EXPIRED');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async refreshToken(refreshToken: string): Promise<string> {\r\n    try {\r\n      const response = await axios.post(`${CHAT_API_BASE_URL}/auth/refresh`, null, {\r\n        headers: {\r\n          Authorization: `Bearer ${refreshToken}`\r\n        }\r\n      });\r\n      return response.data.accessToken;\r\n    } catch (error) {\r\n      throw new Error('토큰 갱신에 실패했습니다.');\r\n    }\r\n  }\r\n}\r\n\r\nexport const chatService = new ChatService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,iBAAiB,GAAG,2BAA2B;AAMrD,MAAMC,WAAW,CAAC;EAChB,MAAMC,WAAWA,CAACC,OAAe,EAAEC,QAAgB,EAAEC,WAAmB,EAAmB;IACzF,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAS,GAAGP,iBAAiB,eAAe,EAAE;QAC5EQ,MAAM,EAAE;UACNL,OAAO;UACPC;QACF,CAAC;QACDK,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUL,WAAW;QACtC;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACd,IAAId,KAAK,CAACe,YAAY,CAACF,KAAK,CAAC,IAAI,EAAAC,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;QAC/D;QACA,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClC;MACA,MAAMJ,KAAK;IACb;EACF;EAEA,MAAMK,YAAYA,CAACA,YAAoB,EAAmB;IACxD,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMP,KAAK,CAACmB,IAAI,CAAC,GAAGlB,iBAAiB,eAAe,EAAE,IAAI,EAAE;QAC3ES,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUO,YAAY;QACvC;MACF,CAAC,CAAC;MACF,OAAOX,QAAQ,CAACK,IAAI,CAACN,WAAW;IAClC,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd,MAAM,IAAII,KAAK,CAAC,gBAAgB,CAAC;IACnC;EACF;AACF;AAEA,OAAO,MAAMG,WAAW,GAAG,IAAIlB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}